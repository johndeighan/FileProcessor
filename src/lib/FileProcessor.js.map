{
  "version": 3,
  "file": "FileProcessor.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\FileProcessor.coffee"
  ],
  "names": [],
  "mappings": ";AAAsB;AAEtB,OAAA;EACC,KADD;EACQ,OADR;EACiB,UADjB;EAC6B,UAD7B;EAEC,QAFD;EAEW,MAFX;CAAA,MAAA;;AAIA,OAAA;EAAQ,MAAR;EAAgB,KAAhB;CAAA,MAAA;;AACA,OAAA;EACC,MADD;EACS,QADT;EACmB,WADnB;EACgC,UADhC;EAC4C,UAD5C;CAAA,MAAA;;AAGA,OAAA;EACC,QADD;EACW,SADX;EACsB,GADtB;CAAA,MAAA,6BAVsB;;;AAgBtB,OAAA,IAAa,gBAAN,MAAA,cAAA;EAEN,WAAa,KAAA,EAAQ,WAAS,CAAA,CAAjB,CAAA;IAAC,IAAC,CAAA,YAChB;;;;IAIE,QAAA,CAAS,eAAT,EAA0B,QAA1B;IACA,MAAA,CAAO,QAAA,CAAS,IAAC,CAAA,IAAV,CAAP,EAAwB,mBAAxB;IACA,IAAC,CAAA,QAAD,GAAY,UAAA,CAAW,QAAX,EAAqB;MAChC,SAAA,EAAW;IADqB,CAArB,EANd;;IAWE,IAAC,CAAA,QAAD,GAAY,QAAA,CAAS,IAAC,CAAA,IAAV;IACZ,MAAA,CAAO,CAAC,IAAC,CAAA,QAAD,KAAa,KAAd,CAAA,IAAwB,CAAC,IAAC,CAAA,QAAD,KAAa,MAAd,CAA/B,EACC,CAAA,UAAA,CAAA,CAAa,IAAC,CAAA,QAAd,CAAA,oBAAA,CADD,EAZF;;IAgBE,IAAC,CAAA,IAAD,GAAQ,MAAA,CAAO,IAAC,CAAA,IAAR;IACR,SAAA,CAAU,eAAV;EAlBY,CAAd;;;;EAuBC,KAAO,CAAA,CAAA;IAEN,GAAA,CAAI,gBAAJ;EAFM,CAvBR;;;;EA+BC,GAAK,CAAA,CAAA;IAEJ,GAAA,CAAI,cAAJ;EAFI,CA/BN;;;EAsCC,UAAY,CAAC,SAAD,CAAA;AAEX,WAAO,KAFI;EAAA,CAtCb;;;;EA4CC,UAAY,CAAC,IAAD,EAAO,OAAP,EAAgB,SAAhB,CAAA;AAEX,WAAO,KAFI;EAAA,CA5Cb;;;;EAkDC,EAAI,CAAA,CAAA;AAEL,QAAA,KAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAE,IAAC,CAAA,KAAD,CAAA;IACA,KAAA,GAAQ;AAER,YAAO,IAAC,CAAA,QAAR;AAAA,WACM,MADN;QAEE,SAAA,GAAY,WAAA,CAAY,IAAC,CAAA,IAAb;QACZ,IAAA,GAAO,SAAS,CAAC;QACjB,KAAA,GAAQ;QACR,IAAG,IAAC,CAAA,UAAD,CAAY,SAAZ,CAAH;UACC,GAAA,CAAI,CAAA,CAAA,CAAA,CAAI,KAAJ,CAAA,EAAA,CAAA,CAAc,IAAd,CAAA,SAAA,CAAJ;UACA,IAAC,CAAA,UAAD,CAAY,SAAZ,EAFD;SAAA,MAAA;UAIC,GAAA,CAAI,CAAA,CAAA,CAAA,CAAI,KAAJ,CAAA,EAAA,CAAA,CAAc,IAAd,CAAA,OAAA,CAAJ,EAJD;;AAJI;AADN,WAUM,KAVN;QAWE,GAAA,CAAI,CAAA,sBAAA,CAAA,CAAyB,IAAC,CAAA,IAA1B,CAAA,CAAA,CAAJ;QACA,IAAA,GAAO;UAAC,SAAA,EAAW,CAAC,CAAC,IAAC,CAAA,QAAQ,CAAC;QAAxB;AACP;QAAA,KAAA,gBAAA;UACC,IAAA,GAAO,SAAS,CAAC;UACjB,KAAA,IAAS;UACT,IAAG,IAAC,CAAA,UAAD,CAAY,SAAZ,CAAH;YACC,GAAA,CAAI,CAAA,CAAA,CAAA,CAAI,KAAJ,CAAA,EAAA,CAAA,CAAc,IAAd,CAAA,SAAA,CAAJ;YACA,IAAC,CAAA,UAAD,CAAY,SAAZ,EAFD;WAAA,MAAA;YAIC,GAAA,CAAI,CAAA,CAAA,CAAA,CAAI,KAAJ,CAAA,EAAA,CAAA,CAAc,IAAd,CAAA,OAAA,CAAJ,EAJD;;QAHD;AAbF;IAqBA,GAAA,CAAI,CAAA,CAAA,CAAG,KAAH,CAAA,gBAAA,CAAJ;IACA,IAAC,CAAA,GAAD,CAAA;EA3BG,CAlDL;;;EAkFC,SAAW,CAAC,SAAD,CAAA,EAAA,CAlFZ;;;;EAwFC,QAAU,CAAC,SAAD,CAAA;AAEX,QAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA;IAAE,MAAA,CAAO,OAAA,CAAQ,SAAR,CAAP,EAA2B,+BAA3B;IACA,OAAA,GAAU;AACV;IAAA,KAAA,WAAA;MACC,IAAG,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,OAAlB,EAA2B,SAA3B,CAAH;QACC,OAAA,GAAU,IAAC,CAAA,UAAD,CAAY,IAAZ,EAAkB,OAAlB,EAA2B,SAA3B;QACV,IAAG,OAAA,CAAQ,OAAR,CAAH;UACC,MAAA,CAAO,MAAA,CAAO,OAAP,CAAP,EAAwB,gCAAxB;UACA,IAAG,OAAO,CAAC,KAAX;AACC,mBADD;WAFD;SAFD;;MAMA,OAAA,IAAW;IAPZ;EAJS,CAxFX;;;EAwGC,OAAS,CAAC,SAAD,CAAA,EAAA,CAxGV;;;;;EA+GC,UAAY,CAAC,SAAD,CAAA;IAEX,IAAC,CAAA,SAAD,CAAW,SAAX;IACA,IAAC,CAAA,QAAD,CAAU,SAAV;IACA,IAAC,CAAA,OAAD,CAAS,SAAT;EAJW,CA/Gb;;;EAwHC,UAAY,CAAC,IAAD,EAAO,OAAP,EAAgB,SAAhB,CAAA,EAAA,CAxHb;;AAFO",
  "sourcesContent": [
    "# FileProcessor.coffee\r\n\r\nimport {\r\n\tundef, defined, notdefined, getOptions,\r\n\tisString, isHash,\r\n\t} from '@jdeighan/base-utils'\r\nimport {assert, croak} from '@jdeighan/base-utils/exceptions'\r\nimport {\r\n\tmkpath, pathType, parseSource, allFilesIn, allLinesIn,\r\n\t} from '@jdeighan/base-utils/fs'\r\nimport {\r\n\tdbgEnter, dbgReturn, dbg,\r\n\t} from '@jdeighan/base-utils/debug'\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport class FileProcessor\r\n\r\n\tconstructor: (@path, hOptions={}) ->\r\n\t\t# --- path can be a file or directory\r\n\t\t# --- Valid options:\r\n\t\t#        recursive\r\n\r\n\t\tdbgEnter 'FileProcessor', hOptions\r\n\t\tassert isString(@path), \"path not a string\"\r\n\t\t@hOptions = getOptions hOptions, {\r\n\t\t\trecursive: true\r\n\t\t\t}\r\n\r\n\t\t# --- determine type of path\r\n\t\t@pathType = pathType @path\r\n\t\tassert (@pathType == 'dir') || (@pathType == 'file'),\r\n\t\t\t\"path type #{@pathType} must be dir or file\"\r\n\r\n\t\t# --- convert path to a full path\r\n\t\t@path = mkpath @path\r\n\t\tdbgReturn 'FileProcessor'\r\n\r\n\t# ..........................................................\r\n\t# --- called at beginning of @go()\r\n\r\n\tbegin: () ->\r\n\r\n\t\tdbg \"begin() called\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\t# --- called at end of @go()\r\n\r\n\tend: () ->\r\n\r\n\t\tdbg \"end() called\"\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tfilterFile: (hFileInfo) ->\r\n\r\n\t\treturn true    # by default, handle all files in dir\r\n\r\n\t# ..........................................................\r\n\r\n\tfilterLine: (line, lineNum, hFileInfo) ->\r\n\r\n\t\treturn true    # by default, handle all lines in file\r\n\r\n\t# ..........................................................\r\n\r\n\tgo: () ->\r\n\r\n\t\t@begin()\r\n\t\tcount = 0\r\n\r\n\t\tswitch @pathType\r\n\t\t\twhen 'file'\r\n\t\t\t\thFileInfo = parseSource(@path)\r\n\t\t\t\tname = hFileInfo.fileName\r\n\t\t\t\tcount = 1\r\n\t\t\t\tif @filterFile hFileInfo\r\n\t\t\t\t\tdbg \"[#{count}] #{name} - Handle\"\r\n\t\t\t\t\t@handleFile hFileInfo\r\n\t\t\t\telse\r\n\t\t\t\t\tdbg \"[#{count}] #{name} - Skip\"\r\n\t\t\twhen 'dir'\r\n\t\t\t\tdbg \"process all files in '#{@path}'\"\r\n\t\t\t\thOpt = {recursive: !!@hOptions.recursive}\r\n\t\t\t\tfor hFileInfo from allFilesIn(@path, hOpt)\r\n\t\t\t\t\tname = hFileInfo.fileName\r\n\t\t\t\t\tcount += 1\r\n\t\t\t\t\tif @filterFile hFileInfo\r\n\t\t\t\t\t\tdbg \"[#{count}] #{name} - Handle\"\r\n\t\t\t\t\t\t@handleFile hFileInfo\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tdbg \"[#{count}] #{name} - Skip\"\r\n\t\tdbg \"#{count} files processed\"\r\n\t\t@end()\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tbeginFile: (hFileInfo) ->\r\n\r\n\t\treturn    # by default, does nothing\r\n\r\n\t# ..........................................................\r\n\r\n\tprocFile: (hFileInfo) ->\r\n\r\n\t\tassert defined(hFileInfo), \"procFile(): hFileInfo = undef\"\r\n\t\tlineNum = 1\r\n\t\tfor line from allLinesIn(hFileInfo.filePath)\r\n\t\t\tif @filterLine line, lineNum, hFileInfo\r\n\t\t\t\thResult = @handleLine line, lineNum, hFileInfo\r\n\t\t\t\tif defined(hResult)\r\n\t\t\t\t\tassert isHash(hResult), \"handleLine() return not a hash\"\r\n\t\t\t\t\tif hResult.abort\r\n\t\t\t\t\t\treturn\r\n\t\t\tlineNum += 1\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\tendFile: (hFileInfo) ->\r\n\r\n\t\treturn   # by default, does nothing\r\n\r\n\t# ..........................................................\r\n\t# --- default handleFile() calls handleLine() for each line\r\n\r\n\thandleFile: (hFileInfo) ->\r\n\r\n\t\t@beginFile hFileInfo\r\n\t\t@procFile hFileInfo\r\n\t\t@endFile hFileInfo\r\n\t\treturn\r\n\r\n\t# ..........................................................\r\n\r\n\thandleLine: (line, lineNum, hFileInfo) ->\r\n\r\n\t\treturn   # by default, does nothing\r\n"
  ]
}